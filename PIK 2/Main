#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>
#include "menu.h"
#include "my_func.h"

//------------- менюта ------------------------------------
char *txtMenuG[] =
{
	"-----ПРОГРАМА ТЕКСТОВ ФАЙЛ-----",
	"Избор на входен файл за обработка.....................",
	"Показване съдържанието на текстов файл................",
	"Преброяване и запис на символи........................",
	"Брой на срещане на избран символ......................",
	"Замяна на символ с друг символ и записа му в нов файл.",
	"Обработка на числова информация от текстови файл......",
	"Изход...........................................",
	NULL
};
//----------------------------------------------------------
char *txtMenuNumbers[] =
{
	"-----ПРЕБРОЯВАНЕ И ЗАПИС-----",
	"Намиране на мин. и макс. числа във файла ...............................................",
	"Запис на числата в зададен интервал в нов файл в предварително избран брой колони на ред",
	"Изчисляване на ср.ар. от числата във входния файл, като се следи за препълване..........",
	"Замяна на отр. числа във файла с нули и запис в нов файл................................",
	"Изход...................................................................................",
	NULL
};
//-----------------------------------------------------------

int main()
{
	short mode, mode1, mode2, flag1 = 0, flag2 = 0, count1;
	FILE *fp_in = NULL, *fp_out = NULL;
	char name_in[256], name_out[256], ch;
	int *ptr = NULL, n = 0;
	float average;
	//------------------------------------------------------
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	do
	{
		system("cls");
		mode = menu(txtMenuG);
		switch (mode)
		{
			//-------------------------------------------------------------------------------------------------
		case 1:
			system("cls");
			if ((fp_in = getNameFile(name_in, "rt", "за четене")) != NULL)
				flag1 = 1;
			break;
			//----------------------------------------------------------------------------------------------
		case 2:	printTextFile();
			break;

		case 3:
			if (flag1 == 0)
			{
				printf("\nНе сте отворили файл за обработка!");
				system("pause");
				break;
			}
			system("cls");

			if ((fp_out = getNameFile(name_out, "wt", "за запис")) != NULL)
				countSymbols(fp_in, fp_out);
				system("pause");

				fclose(fp_out);
				break;

		case 4: if (flag1 == 0)
				{
					printf("\nНе сте отворили файл за обработка!");
					system("pause");
					break;
				}
				countChosenSymbol(fp_in);
				system("pause");
				break;

		case 5: if (flag1 == 0)
				{
					printf("\nНе сте отворили файл за обработка!");
					system("pause");
					break;
				}

				if ((fp_out = getNameFile(name_out, "wt", "за запис")) != NULL)
					changeSymbol(fp_in, fp_out);

				fclose(fp_out);
				break;

		case 6: if (flag1 == 0)
				{
					printf("\nНе сте отворили файл за обработка!"); system("pause");
					break;
				}

				do
				{
					system("cls");
					mode2 = menu(txtMenuNumbers);
					switch (mode2)
					{
					case 1: maxMinNumbers(fp_in);
						system("pause");
						break;

					case 2:if ((fp_out = getNameFile(name_out, "wt", "за запис")) != NULL)
						writeNumbersOfInterval(fp_in, fp_out); 
						system("pause");
						fclose(fp_out);
						break;

					case 3: average = averageOfNumbers(fp_in);
						printf("Средно аритметичното е = %f\n", average);
						system("pause");
						break;

					case 4: if ((fp_out = getNameFile(name_out, "wt", "за запис")) != NULL)
						changeNegativeNumbers(fp_in, fp_out);
						system("pause");
						fclose(fp_out);
						break;
					}
				} while (mode2 != 5);
				break;
		}
	} while (mode != 7);
	_fcloseall();
}


