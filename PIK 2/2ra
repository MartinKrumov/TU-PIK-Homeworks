#include "Header.h"

int words(FILE *fp_in)
{
	char c;
	int wcount = 0;
	int state = 1;

	rewind(fp_in);

	while ((c = fgetc(fp_in)) != EOF)
	{
		switch (state)
		{
		case 1:
			if (isalpha(c))
			{
				wcount++;
				state = 2;
				break;
			}

		case 2:
			switch (c)
			{
			case '"':
			case '\'':
			case ',':
			case ' ':
			case '.':
			case '?':
			case '!':
			case ':':
			case ';':
			case '/':
			case '\\':
			case '*':
			case '<':
			case '>':
			case '(':
			case ')':
			case '{':
			case '}':
			case '[':
			case ']':
			case '\n':
			case '\t':
				state = 1;
				break;
			}
		}
	}
	return wcount;
}

int sentences(FILE *fp_in)
{
	char c;
	int scount = 0;
	int state = 1;

	rewind(fp_in);

	while ((c = fgetc(fp_in)) != EOF)
	{
		switch (state)
		{
		case 1:
			if (isalpha(c))
				state = 2;
			break;
		case 2:
			switch (c)
			{
			case '.':
			case '!':
			case '?':
			case ':':
				scount++;
				state = 1;
				break;
			}
			break;
		}
	}
	return scount;
}

void copy_words(FILE *fp_in, FILE *fp_out)
{
	char c;
	int new_line = 0;
	int flag = 0;

	rewind(fp_in);

	while ((c = fgetc(fp_in)) != EOF)
	{
		switch (c)
		{
		case '"':
		case '\'':
		case ',':
		case ' ':
		case '.':
		case '?':
		case '!':
		case ':':
		case ';':
		case '/':
		case '\\':
		case '*':
		case '<':
		case '>':
		case '(':
		case ')':
		case '{':
		case '}':
		case '[':
		case ']':
		case '\n':
		case '\t':
			new_line = 1;
			break;
		default:
			new_line = 0;
			break;
		}

		if (new_line == 0 && c != '\n')
		{
			fprintf(fp_out, "%c", c);
			flag = 0;
		}

		if (new_line == 1 && flag == 0)
		{
			fprintf(fp_out, "\n");
			new_line = 0;
			flag = 1;
		}
	}
}

void copy_sentences(FILE *fp_in, FILE *fp_out)
{
	char c;
	int mark = 0;
	int flag = 0;
	int letter = 0;

	rewind(fp_in);

	while ((c = fgetc(fp_in)) != EOF)
	{
		if (isalpha(c))
		{
			mark = 0;
			flag = 0;
			letter = 1;
		}

		if (mark == 0 && letter == 1)
			fprintf(fp_out, "%c", c);

		if (c == '.' || c == '!' || c == '?' || c == ':')
		{
			mark = 1;
			letter = 0;
		}
		if (mark == 1 && flag == 0)
		{
			fprintf(fp_out, "\n");
			mark = 0;
			flag = 1;
		}
	}
}

int IsDelimiter(int c)
{
	int i = 0;
	int delimiter_word[] = { '"', '\'', ' ', ',', '.', '?', '!', ':', ';', '/', '\\', '*',
		'<', '>', '(', ')', '{', '}', '[', ']', '\n', '\t', EOF, 0 };

	while (delimiter_word[i])
	{
		if (c == delimiter_word[i++])
			return 1;
	}
	return 0;
}

void IntConstant(FILE *fp_in)
{
	char digit[256];
	char temp[256];
	int state = 0;
	int count = 0;
	int aint = 0;

	rewind(fp_in);
	while ((fgets(temp, sizeof(temp), fp_in)) != NULL)
	{
		size_t l = strlen(temp);
		for (size_t i = 0; i<l; i++)
		{
			switch (state)
			{
			case 0:		
				if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;

					state = 2;

					break;
				}
			case 1:
				if (temp[i] == '+' || temp[i] == '-')
				{
					if (isdigit(temp[(i + 1)]))
					{
						state = 2;
						digit[count] = temp[i];
						count++;
						break;
					}
					else
						state = 3;
				}
				break;
			case 2:
				if (isdigit(temp[i]) || (temp[i] == 'L' || temp[i] == 'l'))
				{
					digit[count] = temp[i];
					count++;
				}

				else
				{
					if (IsDelimiter(temp[i]))
					{
						digit[count] = '\0';
						aint++;
						printf("%s\n", digit);
						state = 0;
					}
					else
						state = 3;

					count = 0;
					digit[0] = '\0';

				}
				break;
			case 3:
				if (IsDelimiter(temp[i]))
					state = 0;

				break;
			}
		}
	}

	printf("Броя на цифрите е: %d", aint);
}

void RealConstant(FILE *fp_in)
{
	char digit[256];
	char temp[256];
	int i;
	int l;
	int state = 0;
	int count = 0;
	int aint = 0;
	int flag = 0;
	rewind(fp_in);

	while ((fgets(temp, sizeof(temp), fp_in)) != NULL)
	{
		l = strlen(temp);
		for (i = 0; i < l; i++)
		{
			switch (state)
			{
			case 0:
				flag = 0;
				if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;
					state = 1;
					break;
				}

				else if (temp[i] == '+' || temp[i] == '-')
				{
					if (isdigit(temp[(i + 1)]))
					{
						digit[count] = temp[i];
						state = 1;
						count++;
						break;
					}
				}
				break;

			case 1:
				if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;
					break;
				}
				else if (temp[i] == '.')
				{
					digit[count] = temp[i];
					count++;
					state = 2;
					break;
				}
				else if (temp[i] == 'e' || temp[i] == 'E')
				{
					digit[count] = temp[i];
					count++;
					state = 3;
					break;
				}
				else
				{
					digit[0] = '\0';
					count = 0;
					state = 0;
				}
				break;

			case 2:
				if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;
					flag = 1;
					break;
				}
				else if (temp[i] == 'e' || temp[i] == 'E')
				{
					digit[count] = temp[i];
					count++;
					state = 3;
					break;
				}
				else
				{
					if (IsDelimiter(temp[i]))
					{
						if (flag == 1)
						{
							digit[count] = '\0';
							printf("%s\n", digit);

							aint++;
							digit[0] = '\0';
							count = 0;
							state = 0;
							break;
						}
						else
						{
							digit[0] = '\0';
							count = 0;
							state = 0;
							break;
						}
					}
					else
					{
						state = 5;
						digit[0] = '\0';
						count = 0;
					}
				}
				break;

			case 3:
				if (temp[i] == '+' || temp[i] == '-')
				{
					if (isdigit(temp[(i + 1)]))
					{
						digit[count] = temp[i];
						count++;
						state = 4;
						break;
					}
				}
				else if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;
					state = 4;
					break;
				}
				else
				{
					state = 4;
					digit[0] = '\0';
					count = 0;
				}
				break;

			case 4:
				if (isdigit(temp[i]))
				{
					digit[count] = temp[i];
					count++;
					break;
				}
				else if (IsDelimiter(temp[i]))
				{
					digit[count] = '\0';
					printf("%s\n", digit);
					aint++;
					digit[0] = '\0';
					count = 0;
					state = 0;
					break;
				}
				else
				{
					state = 5;
					digit[0] = '\0';
					count = 0;
				}
				break;

			case 5:
				if ((isdigit(temp[i])) || temp[i] == '+' || temp[i] == '-')
				{
					if (isdigit(temp[(i + 1)]))
					{
						digit[count] = temp[i];
						state = 1;
						count++;
						break;
					}
				}
				break;
			default:
				break;
			}
		}
	}
	printf("Броя на цифрите е: %d", aint);
}

int ZabraneniSimvoli(char symbol)
{
	switch (symbol)
	{
	case '|': return 1;
	case '/': return 1;
	case '\\': return 1;
	case '"': return 1;
	case '<': return 1;
	case '>': return 1;
	case ':': return 1;
	case '?': return 1;
	case '*': return 1;
	default: break;
	}
	return 0;
}

int validDirectory(char *path)
{
	int i;
	int length = strlen(path);
	int state = 0;
	for (i = 0; i < length - 1; i++)
	{
		char n = path[i];
		switch (state)
		{
		case 0:
			if (isalpha(n))
				state = 1;
			else return 0;
			break;
		case 1:
			if (n == ':')
				state = 2;
			else return 0;
			break;
		case 2:
			if (n == '\\')
				state = 3;
			else return 0;
			break;
		case 3:
			if (!ZabraneniSimvoli(n) || (n >= '0' && n <= '9') || isalpha(n) || n == '-')
				break;
			else
			{
				if (n == '\\')
				{
					state = 4;
					break;
				}
			}
			return 0;
		case 4:
			if (ZabraneniSimvoli(n))
				return 0;
			else
				state = 3;
			break;
		default:
			break;
		}
	}
	return 1;
}
