#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "funcs.h"

int CheckForOverflow(size_t max, char *arr)
{
	size_t size = strlen(arr);
	if (size >= max)
	{
		fprintf(stderr, "--Overflow!.Too much symbols entered.--\n");
		return 1;
	}

	fflush(stdin);
	return 0;
}

int CheckForValidId(char *arr)
{
	for (size_t i = 0; i < 6; i++)
	{
		if ((i >= 0 && i < 2) || i == 5)
		{
			if (arr[i] < 'A' || arr[i] > 'Z')
			{
				fprintf(stderr, "--Invalid Id.--\n");
				return 1;
			}
		}
		else
		{
			if (!isdigit(arr[i]))
			{
				fprintf(stderr, "--Invalid Id.--\n");
				return 1;
			}
		}
	}
	return 0;
}

int CheckForUniqueId(Node *head, char *id)
{
	if (head == NULL)
	{
		return 1;
	}

	while (head != NULL)
	{
		if (strcmp(id, head->data.Id) == 0)
		{
			fprintf(stderr, "--The ID already exist.Please enter new ID.--\n");
			return 0;
		}
		head = head->next;
	}

	return 1;
}

int CheckForValidDay(size_t day)
{
	fflush(stdin);
	if (day < 1 || day > 31)
	{
		return 1;
	}
	return 0;
}

int CheckForValidMonth(size_t month)
{
	fflush(stdin);
	if (month < 1 || month > 12)
	{
		return 1;
	}
	return 0;
}

int CheckName(size_t max ,char *arr)
{
	if (arr[0] >= 65 && arr[0] <= 90)
	{
		return CheckForOverflow(max, arr);
	}

	return 1;
}

Node *AddElement(Node *head)
{
	int flag;
	int unique = 0;
	Node *temp = (Node*)malloc(sizeof(Node));

	if (temp == NULL)
	{
		fprintf(stderr, "Unable to allocate memory for new node\n");
		return;
	}

	do
	{
		printf("Id: ");
		scanf("%s", temp->data.Id);

		flag = CheckForOverflow(7, temp->data.Id);
		flag = CheckForValidId(temp->data.Id);
		unique = CheckForUniqueId(head, temp->data.Id);

	} while (flag != 0 || unique != 1);

	do
	{
		printf("Document Name: ");
		scanf("%s", temp->data.documentName);
		flag = CheckName(30, temp->data.documentName);
	} while (flag != 0);

	do
	{
		printf("Day: ");
		scanf("%u", &temp->data.date.day);
		flag = CheckForValidDay(temp->data.date.day);
	} while (flag != 0);

	do
	{
		printf("Month: ");
		scanf("%u", &temp->data.date.month);
		flag = CheckForValidMonth(temp->data.date.month);
	} while (flag != 0);


	printf("Year: ");
	scanf("%u", &temp->data.date.year);

	do
	{
		printf("Name: ");
		scanf("%s", temp->data.author.firstName);
		flag = CheckForOverflow(20, temp->data.author.firstName);
	} while (flag != 0);

	do
	{
		printf("Surname: ");
		scanf("%s", temp->data.author.surname);
		flag = CheckForOverflow(20, temp->data.author.surname);
	} while (flag != 0);

	do
	{
		printf("Last Name: ");
		scanf("%s", temp->data.author.lastName);
		flag = CheckForOverflow(20, temp->data.author.lastName);
	} while (flag != 0);

	do
	{
		printf("Information: ");
		scanf("%[^\n]", temp->data.info);
		flag = CheckForOverflow(63, temp->data.info);
	} while (flag != 0);

	printf("-----------------\n");

	temp->next = NULL;

	if (head == NULL)
	{
		head = temp;
	}
	else
	{
		Node *current = head;
		while (current->next != NULL)
		{
			current = current->next;
		}
		current->next = temp;
	}

	return head;
}


void PrintAllElements(Node *head)
{
	if (head == NULL)
	{
		fprintf(stderr, "The list is empty!\n");
	}

	while (head != NULL)
	{
		printf("+++++++++++++++++++\n");
		printf("ID       : %s\n", head->data.Id);
		printf("Doc Name : %s\n", head->data.documentName);
		printf("Date     : %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
		printf("Author   : %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
		printf("Info     : %s\n", head->data.info);
		head = head->next;
	}
}

void PrintElement(Node *head, char *key)
{
	if (head == NULL)
	{
		fprintf(stderr, "The list is empty!\n");
		return;
	}

	while (head != NULL)
	{
		if (strcmp(key, head->data.Id) == 0)
		{
			printf("ID       :: %s\n", head->data.Id);
			printf("Doc Name :: %s\n", head->data.documentName);
			printf("Date     :: %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
			printf("Author   :: %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
			printf("Info     :: %s\n", head->data.info);
		}
		head = head->next;
	}
}

Node *DeleteElement(Node *head, char *Id)
{
	if (head == NULL)
	{
		fprintf(stderr, "The list is empty!\n");
		return;
	}

	// Check to see if current node is one to be deleted.
	if (strcmp(Id, head->data.Id) == 0)
	{
		Node *tempNextP;

		tempNextP = head->next; //Save the next pointer in the node. 

		free(head); //Deallocate the node. 

		/* Return the NEW pointer to where we
		* were called from.  I.e., the pointer
		* the previous call will use to "skip
		* over" the removed node.*/
		return tempNextP;
	}

	/*Check the rest of the list, fixing the next
	  pointer in case the next node is the one removed.*/
	head->next = DeleteElement(head->next, Id);

	
	/*Return the pointer to where we were called from.
	Since we did not remove this node it will be the same.*/
	return head;
}

Node *DeleteList(Node *head)
{
	Node *temp;
	while (head != NULL)
	{
		temp = head;
		head = head->next;
		free(temp);
	}
	return head;
}

FILE *GetFileName(char *name_file, char *mode, char *text)
{
	FILE *fp;
	int err;
	errno = 0;

	do
	{
		printf("Въведете име на файла %s: ", text);
		err = scanf("%s", name_file);
	} while (err != 1);

	if ((fp = fopen(name_file, mode)) == NULL)
	{
		printf("\nФайлът <%s> Не може да се отвори - error No % d !!!\n", name_file, errno);
		printf("ГРЕШКА No %d %s\n", errno, strerror(errno));
		system("pause");
	}
	else
	{
		printf("\nФайлът <%s> е отворен успешно за обработка !\n\n", name_file);
		system("pause");
	}
	return fp;
}

void WriteListToBinFile(Node *head)
{
	char fileName[NAME];
	FILE *destFile = NULL;

	if ((destFile = GetFileName(fileName, "wb", "за записване")) == NULL)
	{
		return;
	}

	Node *currentDoc = head;
	Node *holdNext = NULL;

	while (currentDoc != NULL)
	{
		holdNext = currentDoc->next;
		currentDoc->next = NULL;

		fseek(destFile, 0, SEEK_END);
		fwrite(currentDoc, sizeof(Node), 1, destFile);

		currentDoc->next = holdNext;
		holdNext = NULL;

		currentDoc = currentDoc->next;
	}

	if (destFile)
		fclose(destFile);
}

Node *ReadNextFromFile(Node *head, FILE *srcFile)
{
	size_t returnValue;
	if (head == NULL)
	{
		head = (Node*)malloc(sizeof(Node));
		returnValue = fread(head, sizeof(Node), 1, srcFile);
		head->next = NULL;
	}
	else
	{
		Node *currentDoc = head;
		Node *newDoc = (Node*)malloc(sizeof(Node));
		while (currentDoc->next != NULL)
		{
			currentDoc = currentDoc->next;
		}
		returnValue = fread(newDoc, sizeof(Node), 1, srcFile);
		currentDoc->next = newDoc;
		newDoc->next = NULL;
	}
	return head;
}

Node *ReadListFromBinFile()
{
	Node *head = NULL;
	FILE *srcFile = NULL;
	char fileName[NAME];

	if ((srcFile = GetFileName(fileName, "rb", "за четене")) == NULL)
	{
		return;
	}

	head = DeleteList(head);

	fseek(srcFile, 0, SEEK_END);
	long fileSize = ftell(srcFile);
	rewind(srcFile);

	int numEntries = (int)(fileSize / (sizeof(Node)));
	printf("numEntries:%d\n", numEntries);

	for (size_t loop = 0; loop < numEntries; ++loop)
	{
		fseek(srcFile, (sizeof(Node)* loop), SEEK_SET);
		head = ReadNextFromFile(head, srcFile);
	}

	if (srcFile)
		fclose(srcFile);

	return head;
}

void WriteListToTxtFile(Node *head)
{
	char fileName[NAME];
	FILE *destFile = NULL;

	if ((destFile = GetFileName(fileName, "wt", "за записване")) == NULL)
	{
		return;
	}

	while (head != NULL)
	{
		fprintf(destFile, "%s", head->data.Id);
		fprintf(destFile, ", %s", head->data.documentName);
		fprintf(destFile, ", %u", head->data.date.day);
		fprintf(destFile, ", %u", head->data.date.month);
		fprintf(destFile, ", %u", head->data.date.year);
		fprintf(destFile, ", %s", head->data.author.firstName);
		fprintf(destFile, ", %s", head->data.author.surname);
		fprintf(destFile, ", %s", head->data.author.lastName);
		fprintf(destFile, ", %s\n", head->data.info);

		head = head->next;
	}

	if (destFile)
		fclose(destFile);
}

Node *ReadListFromTxtFile(Node *head)
{
	FILE *srcFile = NULL;
	char fileName[NAME];
	char line[256];

	int err = 1;

	if ((srcFile = GetFileName(fileName, "rt", "за четене")) == NULL)
	{
		return;
	}

	head = DeleteList(head);

	while (fgets(line, sizeof(line), srcFile) != NULL)
	{
		if (head == NULL)
		{
			head = (Node*)malloc(sizeof(Node));
			if (8 != sscanf(line, "%6[^,], %[^,], %u, %u, %u, %[^,], %[^,], %[^,], %[^\n]",
				head->data.Id, head->data.documentName, &head->data.date.day, &head->data.date.month,
				&head->data.date.year, head->data.author.firstName, head->data.author.surname, head->data.author.lastName, head->data.info))
			{
				fprintf(stderr, "Invalid data\n");
			}
			head->next = NULL;
		}
		else
		{
			Node *currentDoc = head;
			Node *newDoc = (Node*)malloc(sizeof(Node));
			while (currentDoc->next != NULL)
			{
				currentDoc = currentDoc->next;
			}
			if (8 != sscanf(line, "%6[^,], %[^,], %u, %u, %u, %[^,], %[^,], %[^,], %[^\n]",
				newDoc->data.Id, newDoc->data.documentName, &newDoc->data.date.day, &newDoc->data.date.month,
				&newDoc->data.date.year, newDoc->data.author.firstName, newDoc->data.author.surname, newDoc->data.author.lastName,
				newDoc->data.info))
			{
				fprintf(stderr, "Invalid data\n");
			}
			currentDoc->next = newDoc;
			newDoc->next = NULL;
		}
	}

	if (srcFile)
		fclose(srcFile);

	return head;
}

int CompareDates(Date date1, Date date2)
{
	if (date1.year < date2.year)
	{
		return -1;
	}
	else if (date1.year > date2.year)
	{
		return 1;
	}
	else
	{
		if (date1.month < date2.month)
		{
			return -1;
		}
		else if (date1.month > date2.month)
		{
			return 1;
		}
		else if (date1.day < date2.day)
		{
			return -1;
		}
		else if (date1.day > date2.day)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
}

int CompareNames(Document d1, Document d2)
{
	if (strcmp(d1.documentName, d2.documentName) > 0)
	{
		return 1;
	}
	else if (strcmp(d1.documentName, d2.documentName) == 0)
	{
		return 0;
	}
	else
	{
		return -1;
	}
}

int CompareId(Document d1, Document d2)
{
	if (strcmp(d1.Id, d2.Id) > 0)
	{
		return 1;
	}
	else
	{
		return -1;
	}
}



size_t CountNodes(Node *head) //Count all Nodes in the linked list
{
	Node *temp = head;
	size_t count = 0;
	while (temp)
	{
		count++;
		temp = temp->next;
	}
	return count;
}

void Found(Node **current, Node **next, Node **previous, Node **head)
{
	if (*current == *head)
	{
		*head = *next;
	}
	else
	{
		(*previous)->next = *next;
	}
	(*current)->next = (*next)->next;
	(*next)->next = *current;

	*previous = *next;
	*next = (*current)->next;
}

void MoveOn(Node **current, Node **next, Node **previous)
{
	*previous = *current;
	*current = (*current)->next;
	*next = (*current)->next;
}

Node *SortList(Node *head)
{
	int num_nodes = CountNodes(head);

	for (int counter = 0; counter < num_nodes; counter++) {
		Node* current = head;
		Node* next = current->next;
		Node* previous = NULL;

		while (next != NULL)
		{
			if (CompareDates(current->data.date, next->data.date) == 1)
			{
				Found(&current, &next, &previous, &head);
			}
			else if (CompareDates(current->data.date, next->data.date) == 0)
			{
				if (CompareNames(current->data, next->data) == 1)
				{
					Found(&current, &next, &previous, &head);
				}
				else if (CompareNames(current->data, next->data) == 0)
				{
					if (CompareId(current->data, next->data) == 1)
					{
						Found(&current, &next, &previous, &head);
					}
					else
					{
						MoveOn(&current, &next, &previous);
					}
				}
				else
				{
					MoveOn(&current, &next, &previous);
				}
			}
			else
			{
				MoveOn(&current, &next, &previous);
			}
		}
	}

	printf("Sort completely done\n");
	return head;
}

void PrintElementsInRange(Node *head)
{
	if (head == NULL)
	{
		fprintf(stderr, "The list is empty!\n");
		return;
	}

	Date currentDate;
	Date previousDate;

	printf("Въвдете текущата дата:\n");
	printf("Ден: ");
	scanf("%u", &currentDate.day);
	
	printf("Месец: ");
	scanf("%u", &currentDate.month);

	printf("Година: ");
	scanf("%u", &currentDate.year); 

	printf("Въведете предишна дата:\n");
	printf("Ден: ");
	scanf("%u", &previousDate.day);

	printf("Месец: ");
	scanf("%u", &previousDate.month);

	printf("Година: ");
	scanf("%u", &previousDate.year);


	while (head != NULL)
	{
		int curr = CompareDates(head->data.date, currentDate); //връща -1 ако първата дата 1 по-малка от 2рата
		int prev = CompareDates(head->data.date, previousDate); //връща 1 ако първата дата 1 по-голяма от 2рата

		if (curr == -1 && prev == 1)
		{
			printf("+---------------------+\n");
			printf("ID       :: %s\n", head->data.Id);
			printf("Doc Name :: %s\n", head->data.documentName);
			printf("Date     :: %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
			printf("Author   :: %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
		}
		head = head->next;
	}
}

void SearchWordInDoc(Node* head, char *key)
{
	if (head == NULL)
	{
		fprintf(stderr, "The list is empty!\n");
		return;
	}

	char word[16];
	char *found = NULL;

	printf("Въведете думата за търсене: ");
	scanf("%s", word);

	while (head != NULL)
	{
		if (strcmp(key, head->data.Id) == 0)
		{
			found = strstr(head->data.info, word);
		}
		head = head->next;
	}

	if (found)
		printf("Думата \"%s\" е намерена в документа.\n", word);
	else
		printf("Думата \"%s\" не е намерена в документа.\n", word);

}

//Node *GetPrevNode(Node *head, Node *a)
//{
//	if (head == a) // node[a] is first node 
//	{
//		return NULL;
//	}
//	Node *currentNode = head;
//	Node *prevA = NULL;
//
//	while (currentNode && currentNode != a)//search while not reach to end or the node
//	{
//		prevA = currentNode;          // find previous node   
//		currentNode = currentNode->next;
//	}
//	if (currentNode != a)
//	{
//		fprintf(stderr, "\n error: node not found!\n"); // node[a] not present in list
//		exit(1);
//	}
//	return prevA;
//}
//
//void SwapNodes(Node **head, Node **a, Node **b)
//{
//	if ((*head) == NULL || (*a) == NULL || (*b) == NULL) // Empty list or one node is null  
//	{
//		printf("\nNothing to swap, just return.\n");
//		return;
//	}
//
//	// find previos nodes
//	Node *prevA = GetPrevNode(*head, *a);
//	Node *prevB = GetPrevNode(*head, *b);
//
//	//Now swap next fiels of candidate nodes  
//	Node *temp = NULL;
//	temp = (*a)->next;
//	(*a)->next = (*b)->next;
//	(*b)->next = temp;
//
//	//Change head: if any node was a head 
//	if ((*head) == (*a))
//	{
//		*head = *b;
//	}
//	else
//	{
//		if ((*head) == (*b))
//			*head = *a;
//	}
//}
