#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "funcs.h"

int CheckForOverflow(size_t max, char *arr)
{
	size_t size = strlen(arr);
	if (size >= max)
	{
		printf("--Overflow!.Too much symbols entered.--\n");
		return 1;
	}

	fflush(stdin);
	return 0;
}

int CheckForValidId(char *arr)
{
	for (size_t i = 0; i < 6; i++)
	{
		if ((i >= 0 && i < 2) || i == 5)
		{
			if (arr[i] < 'A' || arr[i] > 'Z') //проверява дали е различно от главна буква
			{
				printf("--Invalid Id.--\n"); // ако е икарва на екрана невалидно ИД
				return 1;
			}
		}
		else
		{
			if (if (arr[i] < '0' || arr[i] > '9'))
			{
				printf("--Invalid Id.--\n");
				return 1;
			}
		}
	}
	return 0;
}

int CheckForUniqueId(Node *head, char *id) //Проверява дали ID-to вечне не се среща
{
	if (head == NULL)
	{
		return 1;
	}

	while (head != NULL)
	{
		if (strcmp(id, head->data.Id) == 0)
		{
			printf("--The ID already exist.Please enter new ID.--\n");
			return 0;
		}
		head = head->next;
	}

	return 1;
}

int CheckForValidDay(size_t day)
{
	fflush(stdin);
	if (day < 1 || day > 31)
	{
		return 1;
	}
	return 0;
}

int CheckForValidMonth(size_t month)
{
	fflush(stdin);
	if (month < 1 || month > 12)
	{
		return 1;
	}
	return 0;
}

int CheckName(size_t max, char *arr)
{
	if (arr[0] >= 65 && arr[0] <= 90)
	{
		return CheckForOverflow(max, arr);
	}

	return 1;
}

Node *AddElement(Node *head)
{
	int flag;
	int unique = 0;
	Node *temp = (Node*)malloc(sizeof(Node)); //заделяме памет за новия възел

	if (temp == NULL) //ако заделянето на памет е неуспешно
	{
		fprintf(stderr, "Unable to allocate memory for new node\n");
		return;
	}

	do
	{
		printf("Id: ");
		scanf("%s", temp->data.Id);

		flag = CheckForOverflow(7, temp->data.Id); //връща 0 ако няма препълване
		flag = CheckForValidId(temp->data.Id);
		unique = CheckForUniqueId(head, temp->data.Id); //връща 1 ако номера не се среща вече

	} while (flag != 0 || unique != 1);

	do
	{
		printf("Име на документа: ");
		scanf("%s", temp->data.documentName);
		flag = CheckName(30, temp->data.documentName);
	} while (flag != 0); //ако флаг == 0 илизаме от цикъла

	EnterDates(&temp->data.date); //въвеждаме дата на създаване

	do
	{
		printf("Име: ");
		scanf("%s", temp->data.author.firstName);
		flag = CheckForOverflow(20, temp->data.author.firstName);
	} while (flag != 0);

	do
	{
		printf("Презиме: ");
		scanf("%s", temp->data.author.surname);
		flag = CheckForOverflow(20, temp->data.author.surname);
	} while (flag != 0);

	do
	{
		printf("Фамилия: ");
		scanf("%s", temp->data.author.lastName);
		flag = CheckForOverflow(20, temp->data.author.lastName);
	} while (flag != 0);

	do
	{
		printf("Информация: ");
		scanf("%[^\n]", temp->data.info);
		flag = CheckForOverflow(63, temp->data.info);
	} while (flag != 0);
	printf("-----------------\n");

	temp->next = NULL;

	if (head != NULL)
	{
		temp->next = head; //добавяме новият елемент пред предишния
	}
	head = temp;
	

	return head;
}


void PrintAllElements(Node *head) //Принтира целия списък на екрана
{
	if (head == NULL) //Проверява дали списъка не е празен
	{
		printf("The list is empty!\n");
		return;
	}
	size_t countOfDocuments = CountNodes(head);

	while (head != NULL)
	{
		printf("+------------------------+\n");
		printf("ID        : %s\n", head->data.Id);
		printf("Doc Name  : %s\n", head->data.documentName);
		printf("Дата      : %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
		printf("Автор     : %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
		printf("Информация: %s\n", head->data.info);

		head = head->next; //преминаваме към следващия елемент от списъка
	}
	printf("+------------------------+\n");
	printf("Броят на документите: %u\n", countOfDocuments);
}

void PrintElement(Node *head, char *Id) //Принтира избран елемент от списъка
{
	if (head == NULL)
	{
		printf("The list is empty!\n");
		return;
	}

	while (head != NULL)
	{
		if (strcmp(Id, head->data.Id) == 0) // сравнява търсенето ID с това на елементите
		{
			printf("+------------------------+\n");
			printf("ID        : %s\n", head->data.Id);
			printf("Doc Name  : %s\n", head->data.documentName);
			printf("Дата      : %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
			printf("Автор     : %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
			printf("Информация: %s\n", head->data.info);
		}

		head = head->next; //преминаваме към следващия елемент от списъка
	}
}

void DeleteElement(Node **head, char *Id) //Изтрива избран елемент от списъка
{
	if (*head == NULL)
	{
		printf("The list is empty!\n");
		return;
	}

	Node *current = *head;
	Node *previous = NULL; //For 1st node, indicate there is no previous.

	while (current != NULL)
	{
		if (strcmp(Id, current->data.Id) == 0) // Ако намери съвпадение
		{
			if (previous == NULL)
			{
				*head = current->next; //Ако е първи елемент
			}
			else
			{
				previous->next = current->next; //Предишния възел прескача следващия и сочи към другия елемнт
			}

			free(current); //Освобождава памета на елемнта
			
			printf("Елемента е изтрит успешно.\n");
			return;
		}
		previous = current;
		current = current->next;
	}
}

Node *DeleteList(Node *head) //изтрива елементите от списъка
{
	Node *temp;
	while (head != NULL)
	{
		temp = head;
		head = head->next;
		free(temp); //освобождаваме паметта
	}
	return head;
}

FILE *GetFileName(char *name_file, char *mode, char *text)
{
	FILE *fp;
	int err;
	errno = 0;

	do
	{
		printf("Въведете име на файла %s: ", text);
		err = scanf("%s", name_file);
	} while (err != 1);

	if ((fp = fopen(name_file, mode)) == NULL)
	{
		printf("\nФайлът <%s> Не може да се отвори - error No % d !!!\n", name_file, errno);
		printf("ГРЕШКА No %d %s\n", errno, strerror(errno));
		system("pause");
	}
	else
	{
		printf("\nФайлът <%s> е отворен успешно за обработка !\n\n", name_file);
		system("pause");
	}
	return fp;
}

void WriteListToBinFile(Node *head)
{
	char fileName[128];
	FILE *destFile = NULL;

	if ((destFile = GetFileName(fileName, "wb", "за записване")) == NULL) //отваряме файла в режим писане(в бинарен файл)
	{
		return;
	}

	Node *currentDoc = head;
	Node *holdNext = NULL; //ще съдържа адреса на следващият елемент от списъка

	while (currentDoc != NULL) //докато не стигнем края на списъка
	{
		holdNext = currentDoc->next; 
		currentDoc->next = NULL;

		fwrite(currentDoc, sizeof(Node), 1, destFile); //записва съдържанието на елемента в бинарния файл

		currentDoc->next = holdNext;
		holdNext = NULL;

		currentDoc = currentDoc->next; //преминаваме към следващият елемент
	}

	if (destFile)//проверяваме дали файлът е отворен
		fclose(destFile); //затваряме файлът
}

Node *ReadListFromBinFile(Node *head)
{
	FILE *srcFile = NULL;
	char fileName[128];

	if ((srcFile = GetFileName(fileName, "rb", "за четене")) == NULL)
	{
		return;
	}

	head = DeleteList(head);
	head = NULL;

	fseek(srcFile, 0, SEEK_END); //премества курсора в края на файлът
	long fileSize = ftell(srcFile); //за да разберем колко голям е файлът
	rewind(srcFile); //връщаме файловият указател в началото на файла

	int numEntries = (int)(fileSize / (sizeof(Node))); //изчислява колко елемента имаме записани във файла

	for (size_t loop = 0; loop < numEntries; loop++) //Обхождаме структурите
	{
		fseek(srcFile, (sizeof(Node)* loop), SEEK_SET); //отиваме в началото на структурата, която искаме да прочетем
		head = ReadNextFromFile(head, srcFile);
	}

	if (srcFile) //проверяваме дали файлът е отворен
		fclose(srcFile); //затваряме файлът

	return head;
}

Node *ReadNextFromFile(Node *head, FILE *srcFile)
{
	size_t returnValue;
	if (head == NULL) //ако нямаме елементи в списъка
	{
		head = (Node*)malloc(sizeof(Node)); //заделяме памет за 1 елемент
		returnValue = fread(head, sizeof(Node), 1, srcFile); //четем информацията от бинарният файл
		head->next = NULL;
	}
	else //ако листа не е празен, ще слагаме следващият елемент най-отзад
	{
		Node *currentNode = head;
		Node *newNode = (Node*)malloc(sizeof(Node)); //заделяме памет за новия елемент
		while (currentNode->next != NULL) //обхождаме листа докато стигнем последният елемент
		{
			currentNode = currentNode->next;
		}
		returnValue = fread(newNode, sizeof(Node), 1, srcFile); //като по-горе, freed връща бр. на успешно прочетените символи
		currentNode->next = newNode; //добавяме новият елемент в списъка
		newNode->next = NULL;
	}
	return head;
}

void WriteListToTxtFile(Node *head)
{
	char fileName[128];
	FILE *destFile = NULL;

	if ((destFile = GetFileName(fileName, "wt", "за записване")) == NULL)
	{
		return;
	}

	while (head != NULL) //записва във файла инфото на елемента
	{
		fprintf(destFile, "%s", head->data.Id);
		fprintf(destFile, ", %s", head->data.documentName);
		fprintf(destFile, ", %u", head->data.date.day);
		fprintf(destFile, ", %u", head->data.date.month);
		fprintf(destFile, ", %u", head->data.date.year);
		fprintf(destFile, ", %s", head->data.author.firstName);
		fprintf(destFile, ", %s", head->data.author.surname);
		fprintf(destFile, ", %s", head->data.author.lastName);
		fprintf(destFile, ", %s\n", head->data.info);

		head = head->next; //преминаваме към следващият елемент
	}

	if (destFile) 
		fclose(destFile); //затваряме файла
}

Node *ReadListFromTxtFile(Node *head)
{
	FILE *srcFile = NULL;
	char fileName[128];
	char line[256]; //ще записваме прочетеният ред в масива

	int err = 1;

	if ((srcFile = GetFileName(fileName, "rt", "за четене")) == NULL)
	{
		return;
	}
	int fields = 9; //броят на полета, които трябва да бъдат прочетени

	head = DeleteList(head); 

	while (fgets(line, sizeof(line), srcFile) != NULL) //четем ред по ред от файла
	{
		if (head == NULL)
		{
			head = (Node*)malloc(sizeof(Node));
			//чрез sscanf преместваме информацията от масива line в полетата на новия елемент от списъка
			//sscanf - връща броят на успешно прочетените параметри.Чрез %[^,] четем докато не стигнем запетая.
			if (fields != sscanf(line, "%6[^,], %30[^,], %u, %u, %u, %20[^,], %20[^,], %20[^,], %63[^\n]",
				head->data.Id, head->data.documentName, &head->data.date.day, &head->data.date.month,
				&head->data.date.year, head->data.author.firstName, head->data.author.surname, head->data.author.lastName, head->data.info))
			{
				printf("Невалидна информация.\n"); //ако има грешка/проблем при преместването на информацията 
				printf("Моля оправете информацията във файла, от който четем.\n");
				system("pause");
				return;
			}
			head->next = NULL;
		}
		else
		{
			Node *currentDoc = head;
			Node *newDoc = (Node*)malloc(sizeof(Node));
			while (currentDoc->next != NULL)
			{
				currentDoc = currentDoc->next;
			}
			//чрез sscanf преместваме информацията от масива line в полетата на новия елемент от списъка
			//sscanf - връща броят на успешно прочетените параметри.Чрез %[^,] четем докато не стигнем запетая.
			if (fields != sscanf(line, "%6[^,], %30[^,], %u, %u, %u, %20[^,], %20[^,], %20[^,], %63[^\n]",
				newDoc->data.Id, newDoc->data.documentName, &newDoc->data.date.day, &newDoc->data.date.month,
				&newDoc->data.date.year, newDoc->data.author.firstName, newDoc->data.author.surname, newDoc->data.author.lastName,
				newDoc->data.info))
			{
				printf("Невалидна информация.\n"); //ако има грешка/проблем при преместването на информацията 
				printf("Моля оправете информацията във файла, от който четем.\n");
				system("pause");
				return;
			}
			currentDoc->next = newDoc; //записваме новият елемент след предходният
			newDoc->next = NULL;
		}
	}

	if (srcFile)
		fclose(srcFile); //затваряме отвореният файл

	return head;
}

void SearchWordInDoc(Node* head, char *Id)
{
	if (head == NULL)
	{
		printf("The list is empty!\n");
		return;
	}

	char word[16];
	char *found = NULL;

	printf("Въведете думата за търсене: ");
	scanf("%s", word);

	while (head != NULL)
	{
		if (strcmp(Id, head->data.Id) == 0)
		{
			found = strstr(head->data.info, word);
		}

		head = head->next; //преминаваме към следващия елемент от списъка
	}

	if (found)
		printf("Думата \"%s\" е намерена в документа.\n", word);
	else
		printf("Думата \"%s\" не е намерена в документа.\n", word);
}

size_t CountNodes(Node *head) //Count all Nodes in the linked list
{
	Node *temp = head;
	size_t count = 0;
	while (temp != NULL) //обхождаме списъка
	{
		count++;
		temp = temp->next; //преминаваме към следващият елемент
	}
	return count; //връщаме броя на node-овете.
}

void PrintElementsInRange(Node *head)
{
	if (head == NULL)
	{
		printf("The list is empty!\n");
		return;
	}

	Date currentDate; //променлива от тип Date (структурна променлива)
	Date previousDate;

	printf("Въвдете начална дата:\n");
	EnterDates(&previousDate); //извикваме функцията, с която въвеждаме дата(ден,месец,година)

	printf("Въведете крайна дата:\n");
	EnterDates(&currentDate); //извикваме функцията, с която въвеждаме дата(ден,месец,година)

	while (head != NULL)
	{
		int curr = CompareDates(head->data.date, currentDate); //връща -1 ако първата дата 1 по-малка от 2рата
		int prev = CompareDates(head->data.date, previousDate); //връща 1 ако първата дата 1 по-голяма от 2рата

		if (curr == -1 && prev == 1) //ако се намира в интервала от дати 
		{
			printf("+---------------------+\n");
			printf("ID       : %s\n", head->data.Id);
			printf("Doc Name : %s\n", head->data.documentName);
			printf("Date     : %u.%u.%u\n", head->data.date.day, head->data.date.month, head->data.date.year);
			printf("Author   : %s %s %s\n", head->data.author.firstName, head->data.author.surname, head->data.author.lastName);
		}

		head = head->next; //преминаваме към следващия елемент от списъка
	}
}

void EnterDates(Date *d1)
{
	int flag;
	do
	{
		printf("Ден: ");
		scanf("%u", &d1->day);
		flag = CheckForValidDay(d1->day);
	} while (flag != 0);

	do
	{
		printf("Месец: ");
		scanf("%u", &d1->month);
		flag = CheckForValidMonth(d1->month);
	} while (flag != 0);

	printf("Година: ");
	scanf("%u", &d1->year);
}

Node *SortList(Node *head) //сортиране на списъка чрез масив от указатели
{
	if (head == NULL)
	{
		printf("Списъка е празен!Няма елементи за сортиране.\n");
		return;
	}

	Node **buf = NULL;  //създаваме масивът от указатели
	Node *temp = head, *change; //change ще използваме за да разменяме местата на 2 елемнта

	size_t countOfNodes = CountNodes(head); //борят на възлите в списъка

	buf = (Node**)malloc(countOfNodes*sizeof(Node*)); //динамично заделяне на памет за масива

	for (size_t i = 0; i < countOfNodes; i++, temp = temp->next) //записваме елемнтите от списъка в масива
	{
		buf[i] = temp;
	}

	for (size_t i = 0; i < countOfNodes - 1; i++)
	{
		for (size_t j = 0; j < countOfNodes - 1; j++)
		{
			if (CompareDates(buf[j]->data.date, buf[j + 1]->data.date) == 1) //ако функцията върне 1 разменяме местата на елемнтите
			{
				change = buf[j];
				buf[j] = buf[j + 1];
				buf[j + 1] = change;
			}
			else if (CompareDates(buf[j]->data.date, buf[j + 1]->data.date) == 0) //ако датите са еднакви, сравняваме по име
			{
				if (CompareNames(buf[j]->data, buf[j + 1]->data) == 1) //ако функцията върне 1 разменяме местата на елемнтите
				{
					change = buf[j];
					buf[j] = buf[j + 1];
					buf[j + 1] = change;
				}
				else if (CompareNames(buf[j]->data, buf[j + 1]->data) == 0) //ако имента са еднакви, сравняваме по ID
				{
					if (CompareId(buf[j]->data, buf[j + 1]->data) == 1) //ако функцията върне 1 разменяме местата на елемнтите
					{
						change = buf[j];
						buf[j] = buf[j + 1];
						buf[j + 1] = change;
					}
				}
			}
		}
	}
	head = buf[0]; //head сочи към 1вия елемент от масива
	for (size_t i = 0; i < countOfNodes - 1; i++) //създаваме възлите м/у елемнтите
	{
		buf[i]->next = buf[i + 1];
	}
	buf[countOfNodes - 1]->next = NULL;

	printf("Сортирането е успешно\n");
	return head;
}

int CompareDates(Date date1, Date date2)
{
	if (date1.year > date2.year)
	{
		return 1;
	}
	else if (date1.year == date2.year)
	{
		if (date1.month > date2.month)
		{
			return 1;
		}
		else if (date1.month == date2.month)
		{
			if (date1.day > date2.day)
			{
				return 1;
			}
			else if (date1.day == date2.day)
			{
				return 0;
			}
		}
	}

	return -1; //ако 2рата дата е > от първата
}

int CompareNames(Document d1, Document d2)//Сравняваме имената на документите 
{
	if (strcmp(d1.documentName, d2.documentName) > 0) //връща 1 ако името на 1вия документ е по-голямо
	{
		return 1;
	}
	else if (strcmp(d1.documentName, d2.documentName) == 0) 
	{
		return 0; // връща 0 ако са еднакви
	}
	return -1; //-1 ако името на 2рия док. е по-голямо
}

int CompareId(Document d1, Document d2)
{
	if (strcmp(d1.Id, d2.Id) > 0)
	{
		return 1;
	}
	else
	{
		return -1;
	}
}
